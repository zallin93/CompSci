Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 program: $@1 PROG ID ';' block PERIOD

    3 block: variables cmpdstmt

    4 variables: /* empty */
    5          | VAR vardcls

    6 vardcls: vardcls vardcl ';'
    7        | vardcl ';'
    8        | error ';'

    9 vardcl: idlist ':' type

   10 idlist: idlist ',' ID
   11       | ID

   12 type: ARRAY '[' ICONST ']' OF stype
   13     | stype

   14 stype: INT
   15      | BOOL

   16 stmtlist: stmtlist ';' stmt
   17         | stmt
   18         | error

   19 stmt: fstmt
   20     | astmt
   21     | writestmt

   22 cmpdstmt: BEG stmtlist END

   23 writestmt: PRINT '(' exp ')'

   24 $@2: /* empty */

   25 $@3: /* empty */

   26 fstmt: FOR $@2 ctrlexp DO stmt $@3 ENDFOR

   27 astmt: lhs ASG exp

   28 lhs: ID
   29    | ID '[' exp ']'

   30 exp: exp '+' exp
   31    | exp '-' exp
   32    | exp '*' exp
   33    | exp AND exp
   34    | exp OR exp
   35    | ID
   36    | ID '[' exp ']'
   37    | ICONST
   38    | TRUE
   39    | FALSE
   40    | error

   41 ctrlexp: ID ASG ICONST ',' ICONST


Terminals, with rules where they appear

$end (0) 0
'(' (40) 23
')' (41) 23
'*' (42) 32
'+' (43) 30
',' (44) 10 41
'-' (45) 31
':' (58) 9
';' (59) 2 6 7 8 16
'[' (91) 12 29 36
']' (93) 12 29 36
error (256) 8 18 40
PROG (258) 2
PERIOD (259) 2
VAR (260) 5
INT (261) 14
BOOL (262) 15
PRINT (263) 23
DO (264) 26
ENDFOR (265) 26
ARRAY (266) 12
OF (267) 12
BEG (268) 22
END (269) 22
ASG (270) 27 41
AND (271) 33
OR (272) 34
TRUE (273) 38
FALSE (274) 39
FOR (275) 26
ID (276) 2 10 11 28 29 35 36 41
ICONST (277) 12 37 41


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 2, on right: 0
$@1 (35)
    on left: 1, on right: 2
block (36)
    on left: 3, on right: 2
variables (37)
    on left: 4 5, on right: 3
vardcls (38)
    on left: 6 7 8, on right: 5 6
vardcl (39)
    on left: 9, on right: 6 7
idlist (40)
    on left: 10 11, on right: 9 10
type (41)
    on left: 12 13, on right: 9
stype (42)
    on left: 14 15, on right: 12 13
stmtlist (43)
    on left: 16 17 18, on right: 16 22
stmt (44)
    on left: 19 20 21, on right: 16 17 26
cmpdstmt (45)
    on left: 22, on right: 3
writestmt (46)
    on left: 23, on right: 21
fstmt (47)
    on left: 26, on right: 19
$@2 (48)
    on left: 24, on right: 26
$@3 (49)
    on left: 25, on right: 26
astmt (50)
    on left: 27, on right: 20
lhs (51)
    on left: 28 29, on right: 27
exp (52)
    on left: 30 31 32 33 34 35 36 37 38 39 40, on right: 23 27 29 30
    31 32 33 34 36
ctrlexp (53)
    on left: 41, on right: 26


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: $@1 . PROG ID ';' block PERIOD

    PROG  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: $@1 PROG . ID ';' block PERIOD

    ID  shift, and go to state 5


state 5

    2 program: $@1 PROG ID . ';' block PERIOD

    ';'  shift, and go to state 6


state 6

    2 program: $@1 PROG ID ';' . block PERIOD

    VAR  shift, and go to state 7

    $default  reduce using rule 4 (variables)

    block      go to state 8
    variables  go to state 9


state 7

    5 variables: VAR . vardcls

    error  shift, and go to state 10
    ID     shift, and go to state 11

    vardcls  go to state 12
    vardcl   go to state 13
    idlist   go to state 14


state 8

    2 program: $@1 PROG ID ';' block . PERIOD

    PERIOD  shift, and go to state 15


state 9

    3 block: variables . cmpdstmt

    BEG  shift, and go to state 16

    cmpdstmt  go to state 17


state 10

    8 vardcls: error . ';'

    ';'  shift, and go to state 18


state 11

   11 idlist: ID .

    $default  reduce using rule 11 (idlist)


state 12

    5 variables: VAR vardcls .
    6 vardcls: vardcls . vardcl ';'

    ID  shift, and go to state 11

    $default  reduce using rule 5 (variables)

    vardcl  go to state 19
    idlist  go to state 14


state 13

    7 vardcls: vardcl . ';'

    ';'  shift, and go to state 20


state 14

    9 vardcl: idlist . ':' type
   10 idlist: idlist . ',' ID

    ':'  shift, and go to state 21
    ','  shift, and go to state 22


state 15

    2 program: $@1 PROG ID ';' block PERIOD .

    $default  reduce using rule 2 (program)


state 16

   22 cmpdstmt: BEG . stmtlist END

    error  shift, and go to state 23
    PRINT  shift, and go to state 24
    FOR    shift, and go to state 25
    ID     shift, and go to state 26

    stmtlist   go to state 27
    stmt       go to state 28
    writestmt  go to state 29
    fstmt      go to state 30
    astmt      go to state 31
    lhs        go to state 32


state 17

    3 block: variables cmpdstmt .

    $default  reduce using rule 3 (block)


state 18

    8 vardcls: error ';' .

    $default  reduce using rule 8 (vardcls)


state 19

    6 vardcls: vardcls vardcl . ';'

    ';'  shift, and go to state 33


state 20

    7 vardcls: vardcl ';' .

    $default  reduce using rule 7 (vardcls)


state 21

    9 vardcl: idlist ':' . type

    INT    shift, and go to state 34
    BOOL   shift, and go to state 35
    ARRAY  shift, and go to state 36

    type   go to state 37
    stype  go to state 38


state 22

   10 idlist: idlist ',' . ID

    ID  shift, and go to state 39


state 23

   18 stmtlist: error .

    $default  reduce using rule 18 (stmtlist)


state 24

   23 writestmt: PRINT . '(' exp ')'

    '('  shift, and go to state 40


state 25

   26 fstmt: FOR . $@2 ctrlexp DO stmt $@3 ENDFOR

    $default  reduce using rule 24 ($@2)

    $@2  go to state 41


state 26

   28 lhs: ID .
   29    | ID . '[' exp ']'

    '['  shift, and go to state 42

    $default  reduce using rule 28 (lhs)


state 27

   16 stmtlist: stmtlist . ';' stmt
   22 cmpdstmt: BEG stmtlist . END

    END  shift, and go to state 43
    ';'  shift, and go to state 44


state 28

   17 stmtlist: stmt .

    $default  reduce using rule 17 (stmtlist)


state 29

   21 stmt: writestmt .

    $default  reduce using rule 21 (stmt)


state 30

   19 stmt: fstmt .

    $default  reduce using rule 19 (stmt)


state 31

   20 stmt: astmt .

    $default  reduce using rule 20 (stmt)


state 32

   27 astmt: lhs . ASG exp

    ASG  shift, and go to state 45


state 33

    6 vardcls: vardcls vardcl ';' .

    $default  reduce using rule 6 (vardcls)


state 34

   14 stype: INT .

    $default  reduce using rule 14 (stype)


state 35

   15 stype: BOOL .

    $default  reduce using rule 15 (stype)


state 36

   12 type: ARRAY . '[' ICONST ']' OF stype

    '['  shift, and go to state 46


state 37

    9 vardcl: idlist ':' type .

    $default  reduce using rule 9 (vardcl)


state 38

   13 type: stype .

    $default  reduce using rule 13 (type)


state 39

   10 idlist: idlist ',' ID .

    $default  reduce using rule 10 (idlist)


state 40

   23 writestmt: PRINT '(' . exp ')'

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 52


state 41

   26 fstmt: FOR $@2 . ctrlexp DO stmt $@3 ENDFOR

    ID  shift, and go to state 53

    ctrlexp  go to state 54


state 42

   29 lhs: ID '[' . exp ']'

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 55


state 43

   22 cmpdstmt: BEG stmtlist END .

    $default  reduce using rule 22 (cmpdstmt)


state 44

   16 stmtlist: stmtlist ';' . stmt

    PRINT  shift, and go to state 24
    FOR    shift, and go to state 25
    ID     shift, and go to state 26

    stmt       go to state 56
    writestmt  go to state 29
    fstmt      go to state 30
    astmt      go to state 31
    lhs        go to state 32


state 45

   27 astmt: lhs ASG . exp

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 57


state 46

   12 type: ARRAY '[' . ICONST ']' OF stype

    ICONST  shift, and go to state 58


state 47

   40 exp: error .

    $default  reduce using rule 40 (exp)


state 48

   38 exp: TRUE .

    $default  reduce using rule 38 (exp)


state 49

   39 exp: FALSE .

    $default  reduce using rule 39 (exp)


state 50

   35 exp: ID .
   36    | ID . '[' exp ']'

    '['  shift, and go to state 59

    $default  reduce using rule 35 (exp)


state 51

   37 exp: ICONST .

    $default  reduce using rule 37 (exp)


state 52

   23 writestmt: PRINT '(' exp . ')'
   30 exp: exp . '+' exp
   31    | exp . '-' exp
   32    | exp . '*' exp
   33    | exp . AND exp
   34    | exp . OR exp

    AND  shift, and go to state 60
    OR   shift, and go to state 61
    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ')'  shift, and go to state 65


state 53

   41 ctrlexp: ID . ASG ICONST ',' ICONST

    ASG  shift, and go to state 66


state 54

   26 fstmt: FOR $@2 ctrlexp . DO stmt $@3 ENDFOR

    DO  shift, and go to state 67


state 55

   29 lhs: ID '[' exp . ']'
   30 exp: exp . '+' exp
   31    | exp . '-' exp
   32    | exp . '*' exp
   33    | exp . AND exp
   34    | exp . OR exp

    AND  shift, and go to state 60
    OR   shift, and go to state 61
    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ']'  shift, and go to state 68


state 56

   16 stmtlist: stmtlist ';' stmt .

    $default  reduce using rule 16 (stmtlist)


state 57

   27 astmt: lhs ASG exp .
   30 exp: exp . '+' exp
   31    | exp . '-' exp
   32    | exp . '*' exp
   33    | exp . AND exp
   34    | exp . OR exp

    AND  shift, and go to state 60
    OR   shift, and go to state 61
    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 27 (astmt)


state 58

   12 type: ARRAY '[' ICONST . ']' OF stype

    ']'  shift, and go to state 69


state 59

   36 exp: ID '[' . exp ']'

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 70


state 60

   33 exp: exp AND . exp

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 71


state 61

   34 exp: exp OR . exp

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 72


state 62

   30 exp: exp '+' . exp

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 73


state 63

   31 exp: exp '-' . exp

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 74


state 64

   32 exp: exp '*' . exp

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 75


state 65

   23 writestmt: PRINT '(' exp ')' .

    $default  reduce using rule 23 (writestmt)


state 66

   41 ctrlexp: ID ASG . ICONST ',' ICONST

    ICONST  shift, and go to state 76


state 67

   26 fstmt: FOR $@2 ctrlexp DO . stmt $@3 ENDFOR

    PRINT  shift, and go to state 24
    FOR    shift, and go to state 25
    ID     shift, and go to state 26

    stmt       go to state 77
    writestmt  go to state 29
    fstmt      go to state 30
    astmt      go to state 31
    lhs        go to state 32


state 68

   29 lhs: ID '[' exp ']' .

    $default  reduce using rule 29 (lhs)


state 69

   12 type: ARRAY '[' ICONST ']' . OF stype

    OF  shift, and go to state 78


state 70

   30 exp: exp . '+' exp
   31    | exp . '-' exp
   32    | exp . '*' exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | ID '[' exp . ']'

    AND  shift, and go to state 60
    OR   shift, and go to state 61
    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ']'  shift, and go to state 79


state 71

   30 exp: exp . '+' exp
   31    | exp . '-' exp
   32    | exp . '*' exp
   33    | exp . AND exp
   33    | exp AND exp .
   34    | exp . OR exp

    OR   shift, and go to state 61
    '*'  shift, and go to state 64

    $default  reduce using rule 33 (exp)


state 72

   30 exp: exp . '+' exp
   31    | exp . '-' exp
   32    | exp . '*' exp
   33    | exp . AND exp
   34    | exp . OR exp
   34    | exp OR exp .

    $default  reduce using rule 34 (exp)


state 73

   30 exp: exp . '+' exp
   30    | exp '+' exp .
   31    | exp . '-' exp
   32    | exp . '*' exp
   33    | exp . AND exp
   34    | exp . OR exp

    OR   shift, and go to state 61
    '*'  shift, and go to state 64

    $default  reduce using rule 30 (exp)


state 74

   30 exp: exp . '+' exp
   31    | exp . '-' exp
   31    | exp '-' exp .
   32    | exp . '*' exp
   33    | exp . AND exp
   34    | exp . OR exp

    OR   shift, and go to state 61
    '*'  shift, and go to state 64

    $default  reduce using rule 31 (exp)


state 75

   30 exp: exp . '+' exp
   31    | exp . '-' exp
   32    | exp . '*' exp
   32    | exp '*' exp .
   33    | exp . AND exp
   34    | exp . OR exp

    $default  reduce using rule 32 (exp)


state 76

   41 ctrlexp: ID ASG ICONST . ',' ICONST

    ','  shift, and go to state 80


state 77

   26 fstmt: FOR $@2 ctrlexp DO stmt . $@3 ENDFOR

    $default  reduce using rule 25 ($@3)

    $@3  go to state 81


state 78

   12 type: ARRAY '[' ICONST ']' OF . stype

    INT   shift, and go to state 34
    BOOL  shift, and go to state 35

    stype  go to state 82


state 79

   36 exp: ID '[' exp ']' .

    $default  reduce using rule 36 (exp)


state 80

   41 ctrlexp: ID ASG ICONST ',' . ICONST

    ICONST  shift, and go to state 83


state 81

   26 fstmt: FOR $@2 ctrlexp DO stmt $@3 . ENDFOR

    ENDFOR  shift, and go to state 84


state 82

   12 type: ARRAY '[' ICONST ']' OF stype .

    $default  reduce using rule 12 (type)


state 83

   41 ctrlexp: ID ASG ICONST ',' ICONST .

    $default  reduce using rule 41 (ctrlexp)


state 84

   26 fstmt: FOR $@2 ctrlexp DO stmt $@3 ENDFOR .

    $default  reduce using rule 26 (fstmt)
