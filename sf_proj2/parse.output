Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 program: $@1 PROG ID ';' block PERIOD

    3 block: variables cmpdstmt

    4 variables: /* empty */
    5          | VAR vardcls

    6 vardcls: vardcls vardcl ';'
    7        | vardcl ';'
    8        | error ';'

    9 vardcl: idlist ':' type

   10 idlist: idlist ',' ID
   11       | ID

   12 type: ARRAY '[' ICONST ']' OF stype
   13     | stype

   14 stype: INT
   15      | BOOL

   16 stmtlist: stmtlist ';' stmt
   17         | stmt
   18         | error

   19 stmt: ifstmt
   20     | fstmt
   21     | wstmt
   22     | astmt
   23     | writestmt
   24     | cmpdstmt

   25 cmpdstmt: BEG stmtlist END

   26 ifstmt: ifhead THEN stmt ELSE stmt FI

   27 ifhead: IF condexp

   28 writestmt: PRINT '(' exp ')'

   29 $@2: /* empty */

   30 fstmt: FOR ctrlexp DO stmt $@2 ENDFOR

   31 $@3: /* empty */

   32 $@4: /* empty */

   33 $@5: /* empty */

   34 wstmt: WHILE $@3 condexp $@4 DO stmt $@5 ENDWHILE

   35 astmt: lhs ASG exp

   36 lhs: ID
   37    | ID '[' exp ']'

   38 exp: exp '+' exp
   39    | exp '-' exp
   40    | exp '*' exp
   41    | exp AND exp
   42    | exp OR exp
   43    | ID
   44    | ID '[' exp ']'
   45    | ICONST
   46    | TRUE
   47    | FALSE
   48    | error

   49 ctrlexp: ID ASG ICONST ',' ICONST

   50 condexp: exp NEQ exp
   51        | exp EQ exp
   52        | exp LT exp
   53        | exp LEQ exp
   54        | exp GT exp
   55        | exp GEQ exp
   56        | error


Terminals, with rules where they appear

$end (0) 0
'(' (40) 28
')' (41) 28
'*' (42) 40
'+' (43) 38
',' (44) 10 49
'-' (45) 39
':' (58) 9
';' (59) 2 6 7 8 16
'[' (91) 12 37 44
']' (93) 12 37 44
error (256) 8 18 48 56
PROG (258) 2
PERIOD (259) 2
VAR (260) 5
INT (261) 14
BOOL (262) 15
PRINT (263) 28
THEN (264) 26
IF (265) 27
FI (266) 26
ENDWHILE (267) 34
DO (268) 30 34
ENDFOR (269) 30
ARRAY (270) 12
OF (271) 12
BEG (272) 25
END (273) 25
ASG (274) 35 49
EQ (275) 51
NEQ (276) 50
LT (277) 52
LEQ (278) 53
AND (279) 41
OR (280) 42
TRUE (281) 46
FALSE (282) 47
ELSE (283) 26
WHILE (284) 34
FOR (285) 30
ID (286) 2 10 11 36 37 43 44 49
ICONST (287) 12 45 49
GEQ (288) 55
GT (289) 54


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 2, on right: 0
$@1 (47)
    on left: 1, on right: 2
block (48)
    on left: 3, on right: 2
variables (49)
    on left: 4 5, on right: 3
vardcls (50)
    on left: 6 7 8, on right: 5 6
vardcl (51)
    on left: 9, on right: 6 7
idlist (52)
    on left: 10 11, on right: 9 10
type (53)
    on left: 12 13, on right: 9
stype (54)
    on left: 14 15, on right: 12 13
stmtlist (55)
    on left: 16 17 18, on right: 16 25
stmt (56)
    on left: 19 20 21 22 23 24, on right: 16 17 26 30 34
cmpdstmt (57)
    on left: 25, on right: 3 24
ifstmt (58)
    on left: 26, on right: 19
ifhead (59)
    on left: 27, on right: 26
writestmt (60)
    on left: 28, on right: 23
fstmt (61)
    on left: 30, on right: 20
$@2 (62)
    on left: 29, on right: 30
wstmt (63)
    on left: 34, on right: 21
$@3 (64)
    on left: 31, on right: 34
$@4 (65)
    on left: 32, on right: 34
$@5 (66)
    on left: 33, on right: 34
astmt (67)
    on left: 35, on right: 22
lhs (68)
    on left: 36 37, on right: 35
exp (69)
    on left: 38 39 40 41 42 43 44 45 46 47 48, on right: 28 35 37 38
    39 40 41 42 44 50 51 52 53 54 55
ctrlexp (70)
    on left: 49, on right: 30
condexp (71)
    on left: 50 51 52 53 54 55 56, on right: 27 34


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: $@1 . PROG ID ';' block PERIOD

    PROG  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: $@1 PROG . ID ';' block PERIOD

    ID  shift, and go to state 5


state 5

    2 program: $@1 PROG ID . ';' block PERIOD

    ';'  shift, and go to state 6


state 6

    2 program: $@1 PROG ID ';' . block PERIOD

    VAR  shift, and go to state 7

    $default  reduce using rule 4 (variables)

    block      go to state 8
    variables  go to state 9


state 7

    5 variables: VAR . vardcls

    error  shift, and go to state 10
    ID     shift, and go to state 11

    vardcls  go to state 12
    vardcl   go to state 13
    idlist   go to state 14


state 8

    2 program: $@1 PROG ID ';' block . PERIOD

    PERIOD  shift, and go to state 15


state 9

    3 block: variables . cmpdstmt

    BEG  shift, and go to state 16

    cmpdstmt  go to state 17


state 10

    8 vardcls: error . ';'

    ';'  shift, and go to state 18


state 11

   11 idlist: ID .

    $default  reduce using rule 11 (idlist)


state 12

    5 variables: VAR vardcls .
    6 vardcls: vardcls . vardcl ';'

    ID  shift, and go to state 11

    $default  reduce using rule 5 (variables)

    vardcl  go to state 19
    idlist  go to state 14


state 13

    7 vardcls: vardcl . ';'

    ';'  shift, and go to state 20


state 14

    9 vardcl: idlist . ':' type
   10 idlist: idlist . ',' ID

    ':'  shift, and go to state 21
    ','  shift, and go to state 22


state 15

    2 program: $@1 PROG ID ';' block PERIOD .

    $default  reduce using rule 2 (program)


state 16

   25 cmpdstmt: BEG . stmtlist END

    error  shift, and go to state 23
    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    WHILE  shift, and go to state 26
    FOR    shift, and go to state 27
    ID     shift, and go to state 28

    stmtlist   go to state 29
    stmt       go to state 30
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    fstmt      go to state 35
    wstmt      go to state 36
    astmt      go to state 37
    lhs        go to state 38


state 17

    3 block: variables cmpdstmt .

    $default  reduce using rule 3 (block)


state 18

    8 vardcls: error ';' .

    $default  reduce using rule 8 (vardcls)


state 19

    6 vardcls: vardcls vardcl . ';'

    ';'  shift, and go to state 39


state 20

    7 vardcls: vardcl ';' .

    $default  reduce using rule 7 (vardcls)


state 21

    9 vardcl: idlist ':' . type

    INT    shift, and go to state 40
    BOOL   shift, and go to state 41
    ARRAY  shift, and go to state 42

    type   go to state 43
    stype  go to state 44


state 22

   10 idlist: idlist ',' . ID

    ID  shift, and go to state 45


state 23

   18 stmtlist: error .

    $default  reduce using rule 18 (stmtlist)


state 24

   28 writestmt: PRINT . '(' exp ')'

    '('  shift, and go to state 46


state 25

   27 ifhead: IF . condexp

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp      go to state 52
    condexp  go to state 53


state 26

   34 wstmt: WHILE . $@3 condexp $@4 DO stmt $@5 ENDWHILE

    $default  reduce using rule 31 ($@3)

    $@3  go to state 54


state 27

   30 fstmt: FOR . ctrlexp DO stmt $@2 ENDFOR

    ID  shift, and go to state 55

    ctrlexp  go to state 56


state 28

   36 lhs: ID .
   37    | ID . '[' exp ']'

    '['  shift, and go to state 57

    $default  reduce using rule 36 (lhs)


state 29

   16 stmtlist: stmtlist . ';' stmt
   25 cmpdstmt: BEG stmtlist . END

    END  shift, and go to state 58
    ';'  shift, and go to state 59


state 30

   17 stmtlist: stmt .

    $default  reduce using rule 17 (stmtlist)


state 31

   24 stmt: cmpdstmt .

    $default  reduce using rule 24 (stmt)


state 32

   19 stmt: ifstmt .

    $default  reduce using rule 19 (stmt)


state 33

   26 ifstmt: ifhead . THEN stmt ELSE stmt FI

    THEN  shift, and go to state 60


state 34

   23 stmt: writestmt .

    $default  reduce using rule 23 (stmt)


state 35

   20 stmt: fstmt .

    $default  reduce using rule 20 (stmt)


state 36

   21 stmt: wstmt .

    $default  reduce using rule 21 (stmt)


state 37

   22 stmt: astmt .

    $default  reduce using rule 22 (stmt)


state 38

   35 astmt: lhs . ASG exp

    ASG  shift, and go to state 61


state 39

    6 vardcls: vardcls vardcl ';' .

    $default  reduce using rule 6 (vardcls)


state 40

   14 stype: INT .

    $default  reduce using rule 14 (stype)


state 41

   15 stype: BOOL .

    $default  reduce using rule 15 (stype)


state 42

   12 type: ARRAY . '[' ICONST ']' OF stype

    '['  shift, and go to state 62


state 43

    9 vardcl: idlist ':' type .

    $default  reduce using rule 9 (vardcl)


state 44

   13 type: stype .

    $default  reduce using rule 13 (type)


state 45

   10 idlist: idlist ',' ID .

    $default  reduce using rule 10 (idlist)


state 46

   28 writestmt: PRINT '(' . exp ')'

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 64


state 47

   48 exp: error .
   56 condexp: error .

    THEN      reduce using rule 56 (condexp)
    DO        reduce using rule 56 (condexp)
    $default  reduce using rule 48 (exp)


state 48

   46 exp: TRUE .

    $default  reduce using rule 46 (exp)


state 49

   47 exp: FALSE .

    $default  reduce using rule 47 (exp)


state 50

   43 exp: ID .
   44    | ID . '[' exp ']'

    '['  shift, and go to state 65

    $default  reduce using rule 43 (exp)


state 51

   45 exp: ICONST .

    $default  reduce using rule 45 (exp)


state 52

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   50 condexp: exp . NEQ exp
   51        | exp . EQ exp
   52        | exp . LT exp
   53        | exp . LEQ exp
   54        | exp . GT exp
   55        | exp . GEQ exp

    EQ   shift, and go to state 66
    NEQ  shift, and go to state 67
    LT   shift, and go to state 68
    LEQ  shift, and go to state 69
    AND  shift, and go to state 70
    OR   shift, and go to state 71
    GEQ  shift, and go to state 72
    GT   shift, and go to state 73
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76


state 53

   27 ifhead: IF condexp .

    $default  reduce using rule 27 (ifhead)


state 54

   34 wstmt: WHILE $@3 . condexp $@4 DO stmt $@5 ENDWHILE

    error   shift, and go to state 47
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp      go to state 52
    condexp  go to state 77


state 55

   49 ctrlexp: ID . ASG ICONST ',' ICONST

    ASG  shift, and go to state 78


state 56

   30 fstmt: FOR ctrlexp . DO stmt $@2 ENDFOR

    DO  shift, and go to state 79


state 57

   37 lhs: ID '[' . exp ']'

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 80


state 58

   25 cmpdstmt: BEG stmtlist END .

    $default  reduce using rule 25 (cmpdstmt)


state 59

   16 stmtlist: stmtlist ';' . stmt

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    WHILE  shift, and go to state 26
    FOR    shift, and go to state 27
    ID     shift, and go to state 28

    stmt       go to state 81
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    fstmt      go to state 35
    wstmt      go to state 36
    astmt      go to state 37
    lhs        go to state 38


state 60

   26 ifstmt: ifhead THEN . stmt ELSE stmt FI

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    WHILE  shift, and go to state 26
    FOR    shift, and go to state 27
    ID     shift, and go to state 28

    stmt       go to state 82
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    fstmt      go to state 35
    wstmt      go to state 36
    astmt      go to state 37
    lhs        go to state 38


state 61

   35 astmt: lhs ASG . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 83


state 62

   12 type: ARRAY '[' . ICONST ']' OF stype

    ICONST  shift, and go to state 84


state 63

   48 exp: error .

    $default  reduce using rule 48 (exp)


state 64

   28 writestmt: PRINT '(' exp . ')'
   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    ')'  shift, and go to state 85


state 65

   44 exp: ID '[' . exp ']'

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 86


state 66

   51 condexp: exp EQ . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 87


state 67

   50 condexp: exp NEQ . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 88


state 68

   52 condexp: exp LT . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 89


state 69

   53 condexp: exp LEQ . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 90


state 70

   41 exp: exp AND . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 91


state 71

   42 exp: exp OR . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 92


state 72

   55 condexp: exp GEQ . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 93


state 73

   54 condexp: exp GT . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 94


state 74

   38 exp: exp '+' . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 95


state 75

   39 exp: exp '-' . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 96


state 76

   40 exp: exp '*' . exp

    error   shift, and go to state 63
    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    ID      shift, and go to state 50
    ICONST  shift, and go to state 51

    exp  go to state 97


state 77

   34 wstmt: WHILE $@3 condexp . $@4 DO stmt $@5 ENDWHILE

    $default  reduce using rule 32 ($@4)

    $@4  go to state 98


state 78

   49 ctrlexp: ID ASG . ICONST ',' ICONST

    ICONST  shift, and go to state 99


state 79

   30 fstmt: FOR ctrlexp DO . stmt $@2 ENDFOR

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    WHILE  shift, and go to state 26
    FOR    shift, and go to state 27
    ID     shift, and go to state 28

    stmt       go to state 100
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    fstmt      go to state 35
    wstmt      go to state 36
    astmt      go to state 37
    lhs        go to state 38


state 80

   37 lhs: ID '[' exp . ']'
   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    ']'  shift, and go to state 101


state 81

   16 stmtlist: stmtlist ';' stmt .

    $default  reduce using rule 16 (stmtlist)


state 82

   26 ifstmt: ifhead THEN stmt . ELSE stmt FI

    ELSE  shift, and go to state 102


state 83

   35 astmt: lhs ASG exp .
   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 35 (astmt)


state 84

   12 type: ARRAY '[' ICONST . ']' OF stype

    ']'  shift, and go to state 103


state 85

   28 writestmt: PRINT '(' exp ')' .

    $default  reduce using rule 28 (writestmt)


state 86

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   44    | ID '[' exp . ']'

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    ']'  shift, and go to state 104


state 87

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   51 condexp: exp EQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 51 (condexp)


state 88

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   50 condexp: exp NEQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 50 (condexp)


state 89

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   52 condexp: exp LT exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 52 (condexp)


state 90

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   53 condexp: exp LEQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 53 (condexp)


state 91

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   41    | exp AND exp .
   42    | exp . OR exp

    OR   shift, and go to state 71
    '*'  shift, and go to state 76

    $default  reduce using rule 41 (exp)


state 92

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   42    | exp OR exp .

    $default  reduce using rule 42 (exp)


state 93

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   55 condexp: exp GEQ exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 55 (condexp)


state 94

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp
   54 condexp: exp GT exp .

    AND  shift, and go to state 70
    OR   shift, and go to state 71
    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 54 (condexp)


state 95

   38 exp: exp . '+' exp
   38    | exp '+' exp .
   39    | exp . '-' exp
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp

    OR   shift, and go to state 71
    '*'  shift, and go to state 76

    $default  reduce using rule 38 (exp)


state 96

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   39    | exp '-' exp .
   40    | exp . '*' exp
   41    | exp . AND exp
   42    | exp . OR exp

    OR   shift, and go to state 71
    '*'  shift, and go to state 76

    $default  reduce using rule 39 (exp)


state 97

   38 exp: exp . '+' exp
   39    | exp . '-' exp
   40    | exp . '*' exp
   40    | exp '*' exp .
   41    | exp . AND exp
   42    | exp . OR exp

    $default  reduce using rule 40 (exp)


state 98

   34 wstmt: WHILE $@3 condexp $@4 . DO stmt $@5 ENDWHILE

    DO  shift, and go to state 105


state 99

   49 ctrlexp: ID ASG ICONST . ',' ICONST

    ','  shift, and go to state 106


state 100

   30 fstmt: FOR ctrlexp DO stmt . $@2 ENDFOR

    $default  reduce using rule 29 ($@2)

    $@2  go to state 107


state 101

   37 lhs: ID '[' exp ']' .

    $default  reduce using rule 37 (lhs)


state 102

   26 ifstmt: ifhead THEN stmt ELSE . stmt FI

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    WHILE  shift, and go to state 26
    FOR    shift, and go to state 27
    ID     shift, and go to state 28

    stmt       go to state 108
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    fstmt      go to state 35
    wstmt      go to state 36
    astmt      go to state 37
    lhs        go to state 38


state 103

   12 type: ARRAY '[' ICONST ']' . OF stype

    OF  shift, and go to state 109


state 104

   44 exp: ID '[' exp ']' .

    $default  reduce using rule 44 (exp)


state 105

   34 wstmt: WHILE $@3 condexp $@4 DO . stmt $@5 ENDWHILE

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    WHILE  shift, and go to state 26
    FOR    shift, and go to state 27
    ID     shift, and go to state 28

    stmt       go to state 110
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    fstmt      go to state 35
    wstmt      go to state 36
    astmt      go to state 37
    lhs        go to state 38


state 106

   49 ctrlexp: ID ASG ICONST ',' . ICONST

    ICONST  shift, and go to state 111


state 107

   30 fstmt: FOR ctrlexp DO stmt $@2 . ENDFOR

    ENDFOR  shift, and go to state 112


state 108

   26 ifstmt: ifhead THEN stmt ELSE stmt . FI

    FI  shift, and go to state 113


state 109

   12 type: ARRAY '[' ICONST ']' OF . stype

    INT   shift, and go to state 40
    BOOL  shift, and go to state 41

    stype  go to state 114


state 110

   34 wstmt: WHILE $@3 condexp $@4 DO stmt . $@5 ENDWHILE

    $default  reduce using rule 33 ($@5)

    $@5  go to state 115


state 111

   49 ctrlexp: ID ASG ICONST ',' ICONST .

    $default  reduce using rule 49 (ctrlexp)


state 112

   30 fstmt: FOR ctrlexp DO stmt $@2 ENDFOR .

    $default  reduce using rule 30 (fstmt)


state 113

   26 ifstmt: ifhead THEN stmt ELSE stmt FI .

    $default  reduce using rule 26 (ifstmt)


state 114

   12 type: ARRAY '[' ICONST ']' OF stype .

    $default  reduce using rule 12 (type)


state 115

   34 wstmt: WHILE $@3 condexp $@4 DO stmt $@5 . ENDWHILE

    ENDWHILE  shift, and go to state 116


state 116

   34 wstmt: WHILE $@3 condexp $@4 DO stmt $@5 ENDWHILE .

    $default  reduce using rule 34 (wstmt)
